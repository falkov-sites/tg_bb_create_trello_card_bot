import logging
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.types import Message
from aiogram.enums import ParseMode
import asyncio

from trello_api import TrelloManager
from utils import parse_message, format_card_description, validate_required_fields
from config import Config, validate_config

logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

# bot = Bot(token=Config.TELEGRAM_BOT_TOKEN, parse_mode=ParseMode.HTML)
bot = Bot(token=Config.TELEGRAM_BOT_TOKEN)
dp = Dispatcher()

trello_manager = TrelloManager(Config.TRELLO_API_KEY, Config.TRELLO_TOKEN)


# –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã start ---------------------------------
@dp.message(Command("start"))
async def cmd_start(message: Message):
    welcome_text = """üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–∫–∞–∑–æ–≤ –≤ Trello.

üìù –û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:

"–∏–º—è –∫–∞—Ä—Ç–æ—á–∫–∏": "–°—Ç–æ–ª –∏ —Å—Ç—É–ª—å—è –¥–ª—è –æ—Ö—Ä–∞–Ω—ã"
"–¥–∞—Ç–∞ –∑–∞–∫–∞–∑–∞": 18.08.2025
"–∫—Ä–∞–π–Ω–∏–π —Å—Ä–æ–∫": 02.10.2025
"–∫–ª–∏–µ–Ω—Ç": "–æ—á–µ–Ω—å —Ö–æ—Ä–æ—à–∏–π –∫–ª–∏–µ–Ω—Ç"
"—Ü–≤–µ—Ç": "—Ç–µ—Ä—Ä–∞–∫–æ—Ç"
"–∏–º—è": "–°–µ—Ä–≥–µ–π –§–∞–ª—å–∫–æ–≤"
"—Ç–µ–ª–µ—Ñ–æ–Ω": "+7 (987) 654 3210"
"–æ–ø–∏—Å–∞–Ω–∏–µ": "–ø—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç—ã –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –∫–∞—Ä—Ç–æ—á–∫–∏ –∏–∑ –±–æ—Ç–∞"

üí° –í—Ä–µ–º—è —É–∫–∞–∑—ã–≤–∞—Ç—å –Ω–µ –Ω—É–∂–Ω–æ - –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è —Ç–æ–ª—å–∫–æ –¥–∞—Ç—ã.

–Ø —Å–æ–∑–¥–∞–º –∫–∞—Ä—Ç–æ—á–∫—É –≤ Trello —Å —ç—Ç–∏–º–∏ –¥–∞–Ω–Ω—ã–º–∏."""
    await message.answer(welcome_text)


# –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã help ----------------------------------
@dp.message(Command("help"))
async def cmd_help(message: Message):
    help_text = """–ü–æ–º–æ—â—å –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –±–æ—Ç–∞:

–ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –¥–∞–Ω–Ω—ã–º–∏ –∑–∞–∫–∞–∑–∞ –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ, –∏ —è —Å–æ–∑–¥–∞–º –∫–∞—Ä—Ç–æ—á–∫—É –≤ Trello.

–û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è:
  - –∏–º—è –∫–∞—Ä—Ç–æ—á–∫–∏
  - –¥–∞—Ç–∞ –∑–∞–∫–∞–∑–∞ (—Ç–æ–ª—å–∫–æ –¥–∞—Ç–∞, –±–µ–∑ –≤—Ä–µ–º–µ–Ω–∏)
  - –∫—Ä–∞–π–Ω–∏–π —Å—Ä–æ–∫ (—Ç–æ–ª—å–∫–æ –¥–∞—Ç–∞, –±–µ–∑ –≤—Ä–µ–º–µ–Ω–∏)
  - –∫–ª–∏–µ–Ω—Ç
  - —Ü–≤–µ—Ç
  - –∏–º—è
  - —Ç–µ–ª–µ—Ñ–æ–Ω
  - –æ–ø–∏—Å–∞–Ω–∏–µ

–ü—Ä–∏–º–µ—Ä:
"–∏–º—è –∫–∞—Ä—Ç–æ—á–∫–∏": "–ù–∞–∑–≤–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞"
"–¥–∞—Ç–∞ –∑–∞–∫–∞–∑–∞": 18.08.2025
"–∫—Ä–∞–π–Ω–∏–π —Å—Ä–æ–∫": 02.10.2025
"–∫–ª–∏–µ–Ω—Ç": "–∫–ª–∏–µ–Ω—Ç"
"—Ü–≤–µ—Ç": "—Ü–≤–µ—Ç"
"–∏–º—è": "–∏–º—è"
"—Ç–µ–ª–µ—Ñ–æ–Ω": "+7 XXX XXX XXXX"
"–æ–ø–∏—Å–∞–Ω–∏–µ": "–æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞"
"""
    await message.answer(help_text)


# –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã fields --------------------------------
@dp.message(Command("fields"))
async def cmd_fields(message: Message):
    """–ü–æ–∫–∞–∑–∞—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∫–∞—Å—Ç–æ–º–Ω—ã–µ –ø–æ–ª—è"""
    try:
        custom_fields = trello_manager.get_custom_fields(
            Config.TRELLO_BOARD_ID)

        if custom_fields:
            fields_list = "\n".join(
                [f"‚Ä¢ {field_name} ({field_info['type']})" for field_name, field_info in custom_fields.items()])
            await message.answer(
                f"üìä **–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–∞—Å—Ç–æ–º–Ω—ã–µ –ø–æ–ª—è –Ω–∞ –¥–æ—Å–∫–µ:**\n\n{fields_list}\n\n"
                f"–í—Å–µ–≥–æ –ø–æ–ª–µ–π: {len(custom_fields)}"
            )
        else:
            await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫–∞—Å—Ç–æ–º–Ω—ã–µ –ø–æ–ª—è –∏–ª–∏ –∏—Ö –Ω–µ—Ç –Ω–∞ –¥–æ—Å–∫–µ")
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–∞—Å—Ç–æ–º–Ω—ã—Ö –ø–æ–ª–µ–π: {e}")


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏–π -------------------------------
@dp.message()
async def handle_message(message: Message):
    try:
        # –ü–∞—Ä—Å–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        data = parse_message(message.text)
        logger.info(f"–†–∞—Å–ø–∞—Ä—Å–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: {data}")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è
        is_valid, missing_fields = validate_required_fields(
            data, Config.REQUIRED_FIELDS)

        if not is_valid:
            await message.answer(
                f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è: {', '.join(missing_fields)}\n\n"
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ñ–æ—Ä–º–∞—Ç–∞."
            )
            return

        # –ü–æ–ª—É—á–∞–µ–º ID —Å–ø–∏—Å–∫–∞ –≤ Trello
        list_id = trello_manager.get_list_id(
            Config.TRELLO_BOARD_ID, Config.TRELLO_LIST)
        if not list_id:
            await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —É–∫–∞–∑–∞–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –≤ Trello. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏.")
            return

        # —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∫–∞—Ä—Ç–æ—á–∫–∏
        card_name = data['–∏–º—è –∫–∞—Ä—Ç–æ—á–∫–∏']
        card_description = format_card_description(data)

        # –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∫–∞—Å—Ç–æ–º–Ω—ã—Ö –ø–æ–ª–µ–π
        custom_fields_mapping = {
            "–¥–∞—Ç–∞ –∑–∞–∫–∞–∑–∞": "–¥–∞—Ç–∞ –∑–∞–∫–∞–∑–∞",
            "–∫—Ä–∞–π–Ω–∏–π —Å—Ä–æ–∫": "–∫—Ä–∞–π–Ω–∏–π —Å—Ä–æ–∫",
            "–∫–ª–∏–µ–Ω—Ç": "–∫–ª–∏–µ–Ω—Ç",
            "—Ü–≤–µ—Ç": "—Ü–≤–µ—Ç",
            "–∏–º—è": "–∏–º—è",
            "—Ç–µ–ª–µ—Ñ–æ–Ω": "—Ç–µ–ª–µ—Ñ–æ–Ω"
        }

        custom_fields_data = {}
        for field_key, field_name in custom_fields_mapping.items():
            if field_key in data:
                custom_fields_data[field_name] = data[field_key]

        # –°–æ–∑–¥–∞–µ–º –∫–∞—Ä—Ç–æ—á–∫—É –≤ Trello —Å –∫–∞—Å—Ç–æ–º–Ω—ã–º–∏ –ø–æ–ª—è–º–∏
        success, result = trello_manager.create_card_with_custom_fields(
            list_id,
            card_name,
            card_description,
            custom_fields_data,
            Config.TRELLO_BOARD_ID
        )

        if success:
            card_url = result.get('shortUrl', result.get('url', ''))
            await message.answer(
                f"‚úÖ –ö–∞—Ä—Ç–æ—á–∫–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞ –≤ Trello!\n\n"
                f"üìã **–ù–∞–∑–≤–∞–Ω–∏–µ:** {card_name}\n"
                f"üîó **–°—Å—ã–ª–∫–∞:** {card_url}\n"
                f"üìä **–ó–∞–ø–æ–ª–Ω–µ–Ω—ã –∫–∞—Å—Ç–æ–º–Ω—ã–µ –ø–æ–ª—è:** {', '.join(custom_fields_data.keys())}"
            )
        else:
            await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–∞—Ä—Ç–æ—á–∫–∏: {result}")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        await message.answer(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–æ—Ä–º–∞—Ç –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.\n\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ñ–æ—Ä–º–∞—Ç–∞."
        )


async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        validate_config()
        logger.info("–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")

        # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
        logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")
        await dp.start_polling(bot)

    except ValueError as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")
    except Exception as e:
        logger.error(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")

if __name__ == "__main__":
    asyncio.run(main())
